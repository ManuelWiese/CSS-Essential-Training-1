As a backend/ai developer i don't know much about the web, so here we go!

* External CSS
the type keyword is not needed in html5 anymore. Use
<link rel="stylesheet" href="style.css">

* Inline CSS
use the style keyword on any html tag.
Don't use it ;-)

* Internal CSS
Use the <style> tag in the <head> element and write down your css there.
Internal CSS can overwrite the external if used AFTER the <link...> element.
I don't think there are many cases where you need it.

* Naming conventions
** use index.html as main page
** Use lowercase letters
** Don't use spaces or symbols, seperate words by using a _ or -(- are better for SEO)
** Use this convention for everything(folders, files, ...)

* Syntax
** Selectors determine which HTML element to apply styles to
** Declaration blocks consists of one or more styles rules(in curly braces)
** Declarations are style rules -> property: value;
** Example
h1 {
    color: green;
}

* Type selector
Match the HTML by using the element name. The example above will color all h1 elements green.

* Class selector
<tag class="className">...</tag>
You can define "className", spaces indicate you are using multiple classes: class="a b" means this element 
uses class a and class b.
The same class can be used multiple times.

To select in css use the .className notation.
To select multiple classes use .a.b 

* ID selector
<tag id="myID">...</tag>
You can define "myID", ids can only be used once per page!

To select use the #myID notation.

* Descendent Selectors
Use multiple selectors, separated by a space, to match the descendant elements.
** Example
HTML:
<p>This is my paragraph containing a <a href="nothing_to_see_here">link</a></p>
CSS:
p a {
    ...
}

This will select anchor elements inside a paragraph. Warning: a can be contained in multiple elements inside
p, but still will be selected.

* Grouping Multiple Selectors
h1, h2, h3 {
    color: red;
}

will select h1, h2 and h3 elements. This reduces the number of declarations in the css file.

* Pseudo-Class Selectors

Pseudo-class selectors specifiy the state of the element.
Keywords are combined with another selector, using a colon.

** Example
a:hover {
    color: black;
}

This will select a elements if the mouse hovers over them.

* Comments

c-style comments, but only /* ... */ it seems.

* CSS Color Values
** actual name
color: black;
** hex code
color: #FFFFFF;
** RGB
color: rgb(255, 255, 0);

cool palette generator at https://coolors.co 

* Cascading Style Sheets
CSS rules cascade and are executed from top to bottom.
** Example
h1 {
    color: red;
}
h1 {
    color: blue;
}

This will overwrite the first declaration.

* Inheritance
Styles can be inherited from ancestor to descendant elements. But not all elements inherit all properties.
There is a table, but at first better try it out.

* Specificity

Specificity determines which css rule will take precedence. The selector with the higher specificity will be applied.

id > class > type
* Typefaces and CSS
Use font-family to set the typeface.
Use single or double quotes around font families with spaces in their names.
* Web-Safe Fonts
Fonts that are commonly preinstalled on computers or devices. Visit www.cssfontstack.com to gain an insight.

* Using a Font Stack
font-family accepts multiple arguments(comma separated) as fallback fonts. Choose similar looking fonts as fallback.
Use a generic font family as the last option.(serif, sans serif, cursive, fantasy, monospace)

* Web Fonts
Option to use fonts not installed on the user computer.
** Internal Font source
Included font file in ypour project, declare and to font files using @font-face.

@font-face {
    font-family: 'Font Name';
    src: url(font-file.ttf);
}

Warning: the path starts at the location of the css file.

** External Font Source
For example google fonts. Will be downloaded if needed.
Google font will give you a link element, place this in the head of the document. The font will be usable in CSS.

* Font size: px, em, rem

Relative values are calculated bases on the nearest ancestor element.
Absolute value are not affected by ancestor elements.

px: absolute value in pixels, use whole numbers to prevent rounding errors, default size of body text is 16px
em: named after letter "m", relative unit, 1em = inherited font-size -> Xem = X times inherited font-size
rem: same as em, but realtive to the root element

* font-weight
Font-weigth is thickness or boldness of typefaces.
Values range from 100 to 900, light to dark.
** font-weight keywords
normal = 400
bold = 700
lighter and bolder are relative to the inherited font-weight.

* font-style
Used to add or remove italic style, three values: italic, oblique, normal.

* line-height
height of the space between two lines of text.
px, %, ems, rems or unitless. Relative values are relative to the font-size.

* text-decoration
overline, underline, line-through, none

* text-transform
capitalize, uppercase, lowercase, none

* text-align
Used to center align text, can be applied to the html element itself or the parent element. This style is inherited.

* Adjusting the font-weight property
The font-weight must be supported by the font itself, for example you can choose all the used weight in google font and add
them to the header, this will increase the download size.
